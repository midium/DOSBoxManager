/*
 * DOSBox Manager : .NET front-end for DOSBox
 * Copyright (C) 2015 MiDiUm Software
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using CustomMessageBoxes.MessageBoxes;
using Helpers.Data.Objects;
using Helpers.Translation;

namespace Helpers.Configuration
{
    public class SettingsHelpers
    {
        public SettingsHelpers(){}

        #region "Methods"
        public String SearchDOSBoxLang(String DOSBoxExecutablePath)
        {
            String LangPath = String.Empty; //returned String

            if (Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "*.lng").Length > 0)
                LangPath = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "*.lng")[0];

            if (LangPath == String.Empty)
            {
                if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosbox"))
                {
                    if (Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosbox", "*.lng").Length > 0)
                        LangPath = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosbox", "*.lng")[0];
                }
            }
            //if LangPath is _still_ empty, Windows test cases take place.
            if (LangPath == String.Empty)
            {
                //if Local Settings/Application Data/DOSBox exists
                if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox"))
                {
                    //then, the DOSBox.conf file inside it becomes the default one.
                    if (Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox", "*.lng").Length > 0)
                        LangPath = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox", "*.lng")[0];
                }
                else
                {
                    //if dosbox.conf has been generated by DOSBox in the same directory as dosbox.exe
                    //(behavior of DOSBox versions prior to DOSBox version 0.73)
                    if (DOSBoxExecutablePath != String.Empty)
                    {
                        if (Directory.GetFiles(Directory.GetParent(DOSBoxExecutablePath).FullName, "*.lng").Length > 0)
                            LangPath = Directory.GetFiles(Directory.GetParent(DOSBoxExecutablePath).FullName, "*.lng")[0];
                    }
                }
            }
        
            return LangPath;
        }

        public String SearchDOSBoxConf(String DOSBoxExecutablePath)
        {
            String ConfPath = String.Empty; //returned String

            if (ConfPath == String.Empty)
            {
                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\dosbox.conf"))
                    ConfPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\dosbox.conf";
            }
            //DOSBox ver0.72 case (~/.dosboxrc)
            if (ConfPath == String.Empty)
            {
                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosboxrc"))
                    ConfPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosboxrc";
            }
            //DOSBox ver0.73 and newer case (~/.dosbox/dosbox.conf)
            if (ConfPath == String.Empty)
            {
                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosbox\\dosbox.conf"))
                    ConfPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\.dosbox\\dosbox.conf";
            }
            //if ConfPath is _still_ empty, Windows test cases take place.
            if (ConfPath == String.Empty)
            {
                //if Local Settings/Application Data/DOSBox exists
                if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox"))
                {
                    //then, the DOSBox.conf file inside it becomes the default one. 
                    if (Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox", "*dosbox*.conf").Length > 0)
                        ConfPath = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DOSBox", "*dosbox*.conf")[0];
                }
                else
                {
                    //if dosbox.conf has been generated by DOSBox in the same directory as dosbox.exe
                    //(behavior of DOSBox versions prior to DOSBox version 0.73)
                    if (DOSBoxExecutablePath != String.Empty)
                    {
                        if (File.Exists(Directory.GetParent(DOSBoxExecutablePath).FullName + "\\dosbox.conf"))
                            ConfPath = DOSBoxExecutablePath + "\\dosbox.conf";
                    }
                }
            }
            return ConfPath;
        }

        public String SearchCommonTextEditor()
        {
            String ConfEditorPth = String.Empty;
            if (ConfEditorPth == String.Empty)
            {
                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, Environment.GetFolderPath(Environment.SpecialFolder.System).Length - 8).ToString() + "notepad.exe"))
                    ConfEditorPth = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, Environment.GetFolderPath(Environment.SpecialFolder.System).Length - 8).ToString() + "notepad.exe";
            }
            return ConfEditorPth;
        }

        public String SearchDOSBox(TranslationsHelpers translator, Settings settings, bool isPortableMode)
        {
            String DOSBoxPath;
            DOSBoxPath = String.Empty;
            if (isPortableMode)
            {
                if (File.Exists(Application.StartupPath + "\\dosbox.exe"))
                    DOSBoxPath = Application.StartupPath + "\\dosbox.exe";
                else if (File.Exists(Application.StartupPath + "\\dosbox"))
                    DOSBoxPath = Application.StartupPath + "\\dosbox";
            }
            else
            {
                //test if DOSBox is in Program Files/DOSBox-?.?? (Windows x86)
                if (Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "DOSBox*", SearchOption.TopDirectoryOnly).GetLength(0) != 0)
                {
                    DOSBoxPath = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "DOSBox*", SearchOption.TopDirectoryOnly)[0];
                    if (File.Exists(DOSBoxPath + "\\dosbox.exe"))
                        DOSBoxPath = DOSBoxPath + "\\dosbox.exe";
                }
                else
                {
                    //test if the user is using Windows x64
                    //in this case, DOSBox's installation directory is most likely in "Program Files (x86)"
                    if (Directory.Exists(Environment.SystemDirectory.Substring(0, 3) + "Program Files (x86)"))
                    {
                        if (Directory.GetDirectories(Environment.SystemDirectory.Substring(0, 3) + "Program Files (x86)", "DOSBox*", SearchOption.TopDirectoryOnly).GetLength(0) != 0)
                        {
                            DOSBoxPath = Directory.GetDirectories(Environment.SystemDirectory.Substring(0, 3) + "Program Files (x86)", "DOSBox*", SearchOption.TopDirectoryOnly)[0];
                            if (File.Exists(DOSBoxPath + "\\dosbox.exe"))
                                DOSBoxPath = DOSBoxPath + "\\dosbox.exe";
                        }
                    }
                }
            }

            //if DOSBoxPath is still empty, say to the user that dosbox's executable cannot be found
            if (DOSBoxPath == String.Empty)
            {
                string body = translator.GetTranslatedMessage(settings.Language, 69, "DOSBox Manager cannot find DOSBox, do you want to indicate DOSBox's executable location now?");
                string title = translator.GetTranslatedMessage(settings.Language, 70, "Cannot find DOSBox");
                CustomMessageBox cmb = new CustomMessageBox(body, title, MessageBoxDialogButtons.YesNo, MessageBoxDialogIcon.Question, false, false);
                cmb.ShowDialog();
                switch (cmb.Result)
                {
                    case MessageBoxDialogResult.Yes:
                        OpenFileDialog DBexeFD = new OpenFileDialog();
                        DBexeFD.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
                        DBexeFD.Title = translator.GetTranslatedMessage(settings.Language, 71, "Please indicate DosBox's executable location...");
                        DBexeFD.Filter = translator.GetTranslatedMessage(settings.Language, 72, "DosBox executable (dosbox*)|dosbox*");
                        if (DBexeFD.ShowDialog() == DialogResult.OK)
                            DOSBoxPath = DBexeFD.FileName;//retrieve the selected dosbox.exe path into Amp.DBPath
                        else
                            DOSBoxPath = String.Empty;
                        break;

                    case MessageBoxDialogResult.No:
                        DOSBoxPath = String.Empty;
                        break;
                }
            }
            return DOSBoxPath;
        }
        #endregion

    }
}
